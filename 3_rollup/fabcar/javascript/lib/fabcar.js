/*
 * Copyright IBM Corp. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

'use strict';

const { Contract } = require('fabric-contract-api');
const snarkjs = require("snarkjs");

const vkeys = {
    "protocol": "plonk",
    "curve": "bn128",
    "nPublic": 2,
    "power": 3,
    "k1": "2",
    "k2": "3",
    "Qm": [
     "19903715171713219647296243278235951579580278506690479302042889303332315926278",
     "17120660378840653177662479442559464538124868546304447105759258729104404280257",
     "1"
    ],
    "Ql": [
     "11404022571904598900846821026653715877319601551544762935614397266926181073611",
     "18435298879736363990372256845964379706404781992434535840522217684264714308648",
     "1"
    ],
    "Qr": [
     "16800242442208028154987384227980975393172417699676753590226390385563439710466",
     "8947184977967002175090799712280277231800258416583251599645578950569171117712",
     "1"
    ],
    "Qo": [
     "19903715171713219647296243278235951579580278506690479302042889303332315926278",
     "4767582492998622044583926302697810550571442610993376556929779165540821928326",
     "1"
    ],
    "Qc": [
     "0",
     "1",
     "0"
    ],
    "S1": [
     "11430701581829481894768025158856152021093909075779720824031639994421043407512",
     "3499208462082992688332407054918530875077046270066893741996769060582419109510",
     "1"
    ],
    "S2": [
     "17086559857859878585422227578611466467593349977456152022978838032335696723671",
     "5638930403723647684269322914111190810105333040831390945973627092223765858828",
     "1"
    ],
    "S3": [
     "260450594503947715233915012202669843606700691405369452433725912696044247122",
     "13713667735615915510509570553235615709081747626039221674855607257959158866167",
     "1"
    ],
    "X_2": [
     [
      "14937000172360418764604550636356090791985744389348941069699380867380898518272",
      "10145921905956537309436003737725061861087692053569580760697746468632698355374"
     ],
     [
      "2372083122461095184861997265329728841023701379640259694758194224315671024632",
      "19006065054628450413230576640803718736524132144604479188436542470237295543818"
     ],
     [
      "1",
      "0"
     ]
    ],
    "w": "19540430494807482326159819597004422086093766032135589407132600596362845576832"
   };

   const proof = {
    "A": [
     "12484694238553758930124256344328198121327931215378764311004338245083313141352",
     "5294632158121329455358151060023604243759727126433097946273767144769129559025",
     "1"
    ],
    "B": [
     "12488115381838650832502450849995660909659119781134259871771859531099806251561",
     "1021063450946979759141173776156412137307940751299253742285684227825314808306",
     "1"
    ],
    "C": [
     "7466781814983040364839993819357730136033982285829380709706476595256151396713",
     "87577176609908320531860449682181845096018675358286314645650218793509281400",
     "1"
    ],
    "Z": [
     "11084657571077678202517899519038769493505631644031644975687338865645306387991",
     "13444078329698469075048536752835661816287427079332184069976009637815050436542",
     "1"
    ],
    "T1": [
     "7232737898713765903172440234542588251997052702179812782423448985927240413021",
     "2388761429774864106143530254119784765130715579592108798872755640258548047957",
     "1"
    ],
    "T2": [
     "13686207913416082343416206343306765420074196145417018755220368024646006394769",
     "11906054537066610627871963645151869909568271160378580802174154612778146743374",
     "1"
    ],
    "T3": [
     "13249251047592829437061012629244319745240214102523627638942681123395962450990",
     "9782408525236114810130445489832531390809214445239221516525891616698363031241",
     "1"
    ],
    "Wxi": [
     "8845828521354833584107987190129572373274383654512858107804449507993252529891",
     "3939157257112010244109757791417012067433701731545273761941327695094910886889",
     "1"
    ],
    "Wxiw": [
     "13389462558936905678958897385946364320253800665342901091072455852682595315452",
     "20167458195768018876094303858538500873464479620875533189607624882267224380378",
     "1"
    ],
    "eval_a": "11651674815376349005743228343732931675130507881895528862845844324690214693683",
    "eval_b": "11759070609172664854828986358740314549387721932553653218164290537536873178456",
    "eval_c": "12688941240618307736917622026157726572143357441661852194320494259715237849683",
    "eval_s1": "20115731015754791909557357186833088780795722358328562777034425083941065488210",
    "eval_s2": "13682545194892856106721851712159398043518287363777518994857009458146929077023",
    "eval_zw": "13575856463373054650241324036520277635868441596257619666198255238418668276298",
    "protocol": "plonk",
    "curve": "bn128"
   };

   const vkeysTR = {
    "protocol": "plonk",
    "curve": "bn128",
    "nPublic": 1,
    "power": 15,
    "k1": "2",
    "k2": "3",
    "Qm": [
     "2796433662762753456009391190401026083473366015518831293163704783693896143002",
     "10288683347072002764323822628365467580881205848449478348205382862487054268421",
     "1"
    ],
    "Ql": [
     "17333753322869686689753514433231742400840585506712165204003249274504109274595",
     "3301362915760088846201877026239810036259560969332728168048407390700622974468",
     "1"
    ],
    "Qr": [
     "643654542388028056912043011932414032565158561871415986222079643358339353254",
     "3076998561044797424134106863433939843864678324748116090308981098992593006909",
     "1"
    ],
    "Qo": [
     "3959109150821350391156665322778715861238494671441583850621775340465154852481",
     "7196507027635847888523090457078689932310402729202395863613958241033047514413",
     "1"
    ],
    "Qc": [
     "13153313482497244525614224963381158870190551614727000496894033367686480112208",
     "20536324558121085235311933198833523707380596842418303833509512702637456051585",
     "1"
    ],
    "S1": [
     "10351688921487507008865363240665303460492510226873986104495285914343579544959",
     "9512385254034195952714530617329713510562855622957125185587555968222699319658",
     "1"
    ],
    "S2": [
     "12305241051819556326538859155865741696621287829712214657486981795658147157791",
     "8112406693482658158603279452769330427303478369175074756416256459694498141577",
     "1"
    ],
    "S3": [
     "15178411215269040875266419079433187170346153285363064054227153480015942805479",
     "6464103187723647137938617723996757041466001661587075873979597906613103782936",
     "1"
    ],
    "X_2": [
     [
      "9241218715374779201411111154036484459650074406763143377319337384258966328938",
      "19898882887255050234397714656459620521351790605276343616685186655892677415013"
     ],
     [
      "10114359480674290355156041449915493215417929947286115530154677084462052780061",
      "16893247436153846763545554529990129464174741293041545810909158244613507201454"
     ],
     [
      "1",
      "0"
     ]
    ],
    "w": "20402931748843538985151001264530049874871572933694634836567070693966133783803"
   }

   const proofTR = {
    "A": [
     "3579202575723374216234562265908341501808941459632670473699235092261361911006",
     "5171776579095802630622251095897506943214898184381941390668396467042243739818",
     "1"
    ],
    "B": [
     "8862864785075827288859997906945028951930876180370427707036023843552141152172",
     "9643279003251160658673803766365532474116657317559624010566085066130064056434",
     "1"
    ],
    "C": [
     "2898624165418747399802151909978039694508999150192179586366155282383538717832",
     "77219638140031765234144302846998828287267555081460168346375185691435906022",
     "1"
    ],
    "Z": [
     "10610020684758577618625118600071036718645556537670852799378842815830754043445",
     "2536796136742444254895263080442293974733449704889169049341306596226136399724",
     "1"
    ],
    "T1": [
     "4329657637095875805458442265468853739498036058231914306507568788176537649990",
     "151440337903484935107072755911117472283203822395836904234632377581880319565",
     "1"
    ],
    "T2": [
     "846256369129605645238788952286291894394010852709325010923897334292913930893",
     "1012896008326063468909991801357616918747543735798209164978698963072851956622",
     "1"
    ],
    "T3": [
     "19536760567614541913971438148672562092332396371320809687767330073886503622335",
     "2756364709405146860929654367199905604676169872403338169134721398828762407007",
     "1"
    ],
    "Wxi": [
     "21359909154094624187263039134650624950603813026693105105775583164429541055508",
     "21641566350278444461310466376994772365728307381534502520559124980240970728815",
     "1"
    ],
    "Wxiw": [
     "19490774194072484322511504872887338599511636418881754666848572800825556978437",
     "3505723630936622219820293283756946717568333951246376960184948268525629213660",
     "1"
    ],
    "eval_a": "11681469283715812256093118899390809699505012690810727651814201954301373138392",
    "eval_b": "19960142557392524835379590526438657382654773457398175355253027662414129148483",
    "eval_c": "1845108212225839346201091805383363941175374819288686414098812339292014225452",
    "eval_s1": "8585800732832849962316322596212235394515284398702519176789425624004303501680",
    "eval_s2": "7248930769990704034816244580533322531136074624928449927050794268939200303397",
    "eval_zw": "13600512094672539119023616618782003115751350194742219222781242545873321870760",
    "protocol": "plonk",
    "curve": "bn128"
   }

class FabCar extends Contract {

    async initLedger(ctx) {
        console.info('============= START : Initialize Ledger ===========');
        const cars = [
            {
                color: 'blue',
                make: 'Toyota',
                model: 'Prius',
                owner: 'Tomoko',
            },
            {
                color: 'red',
                make: 'Ford',
                model: 'Mustang',
                owner: 'Brad',
            },
            {
                color: 'green',
                make: 'Hyundai',
                model: 'Tucson',
                owner: 'Jin Soo',
            },
            {
                color: 'yellow',
                make: 'Volkswagen',
                model: 'Passat',
                owner: 'Max',
            },
            {
                color: 'black',
                make: 'Tesla',
                model: 'S',
                owner: 'Adriana',
            },
            {
                color: 'purple',
                make: 'Peugeot',
                model: '205',
                owner: 'Michel',
            },
            {
                color: 'white',
                make: 'Chery',
                model: 'S22L',
                owner: 'Aarav',
            },
            {
                color: 'violet',
                make: 'Fiat',
                model: 'Punto',
                owner: 'Pari',
            },
            {
                color: 'indigo',
                make: 'Tata',
                model: 'Nano',
                owner: 'Valeria',
            },
            {
                color: 'brown',
                make: 'Holden',
                model: 'Barina',
                owner: 'Shotaro',
            },
        ];

        for (let i = 0; i < cars.length; i++) {
            cars[i].docType = 'car';
            await ctx.stub.putState('CAR' + i, Buffer.from(JSON.stringify(cars[i])));
            console.info('Added <--> ', cars[i]);
        }
        console.info('============= END : Initialize Ledger ===========');
    }

    async queryCar(ctx, carNumber) {
        const carAsBytes = await ctx.stub.getState(carNumber); // get the car from chaincode state
        if (!carAsBytes || carAsBytes.length === 0) {
            throw new Error(`${carNumber} does not exist`);
        }
        console.log(carAsBytes.toString());
        return carAsBytes.toString();
    }

    async createCar(ctx, carNumber, make, model, color, owner) {
        console.info('============= START : Create Car ===========');

        const car = {
            color,
            docType: 'car',
            make,
            model,
            owner,
        };

        await ctx.stub.putState(carNumber, Buffer.from(JSON.stringify(car)));
        console.info('============= END : Create Car ===========');
    }

    async queryAllCars(ctx) {
        const startKey = '';
        const endKey = '';
        const allResults = [];
        for await (const {key, value} of ctx.stub.getStateByRange(startKey, endKey)) {
            const strValue = Buffer.from(value).toString('utf8');
            let record;
            try {
                record = JSON.parse(strValue);
            } catch (err) {
                console.log(err);
                record = strValue;
            }
            allResults.push({ Key: key, Record: record });
        }
        console.info(allResults);
        return JSON.stringify(allResults);
    }

    async changeCarOwner(ctx, carNumber, newOwner, inputs) {
        console.info('============= START : changeCarOwner ===========');
        const verify = await this.verify(ctx,inputs);
        if(!verify){
            throw new Error(`UNAUTHORIZED`);
        }

        const carAsBytes = await ctx.stub.getState(carNumber); // get the car from chaincode state
        if (!carAsBytes || carAsBytes.length === 0) {
            throw new Error(`${carNumber} does not exist`);
        }
        const car = JSON.parse(carAsBytes.toString());
        car.owner = newOwner;

        await ctx.stub.putState(carNumber, Buffer.from(JSON.stringify(car)));
        console.info('============= END : changeCarOwner ===========');
    }
    
    async verify(ctx, inputs) {
        console.log("verify");
        console.info("INPUT : ", inputs);
        console.info("vkeys : ", vkeys);
        console.info("proof : ", proof);
        console.info("snarkjs : ", snarkjs);
        const inputsJSON = JSON.parse(inputs);
        const result = await snarkjs.plonk.verify(vkeysTR, inputsJSON, proofTR);
        console.info(result);
        return result;
    }


}

module.exports = FabCar;
